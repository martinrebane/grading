package ee.ttu.kert.maria.central;

import java.util.ArrayList;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ee.ttu.kert.maria.git.GitService;
import ee.ttu.kert.maria.grading.Grade;
import ee.ttu.kert.maria.grading.GradeService;
import ee.ttu.kert.maria.plagiarism.MossService;
import ee.ttu.kert.maria.plagiarism.Plagiarism;
import ee.ttu.kert.maria.review.GitHubService;
import ee.ttu.kert.maria.review.Review;
import ee.ttu.kert.maria.sandbox.EmbeddablService;
import ee.ttu.kert.maria.sandbox.SandBox;
import ee.ttu.kert.maria.studenttask.StudentTask;
import ee.ttu.kert.maria.studenttask.StudentTaskService;
import ee.ttu.kert.maria.submission.Submission;
import ee.ttu.kert.maria.submission.SubmissionService;
import ee.ttu.kert.maria.task.Task;
import ee.ttu.kert.maria.task.TaskService;

@Service
@Transactional
public class CentralService {
	
	private TaskService taskService;
	private StudentTaskService studentTaskService;
	private SubmissionService submissionService;
	private MossService mossService;
	private GitHubService gitHubService;
	private GradeService gradeService;
	private EmbeddablService embeddablService;
	private GitService gitService;
	
	public void init(String uniid, String taskName) {
		gitService.pull(uniid, "");
		Task task = taskService.getByName(taskName);
		if (task == null) {
			System.out.println("creating task");
			task = new Task();
			Plagiarism plagiarism = new Plagiarism();
			
			task.setName(taskName);
			plagiarism.setTask(task);
			mossService.transferFiles(uniid, taskName);
			task.setPlagiarism(mossService.save(plagiarism));
			task.setStudentTasks(new ArrayList<>());
			task = taskService.save(task);
		}
		
		StudentTask studentTask = studentTaskService.getByTaskAndUniid(task, uniid);
		if (studentTask == null) {
			System.out.println("creating studenttask");
			studentTask = new StudentTask();
			Review review = new Review();
			Grade grade = new Grade();
			grade.setStudentTask(studentTask);
			review.setUniId(uniid);
			review.setTaskName(taskName);
			review.setStudentTask(studentTask);
			studentTask.setReview(gitHubService.saveReview(review));
			studentTask.setGrade(gradeService.saveGrade(grade));
			studentTask.setUniid(uniid);
			studentTask.setSubmissions(new ArrayList<>());
			studentTask.setTask(task);
			task.getStudentTasks().add(studentTaskService.save(studentTask));
		}
		
		String currentHash = gitService.getHash(uniid, taskName);
		String newHash = gitService.createHash(uniid, taskName);
		
		if (!newHash.equals(currentHash)) {
			Submission submission = new Submission();
			SandBox sandBox = new SandBox();
			embeddablService.zipProject(uniid, taskName);
			submission.setSandBox(embeddablService.save(sandBox));
			submission.setStudentTask(studentTask);
			studentTask.getSubmissions().add(submissionService.save(submission));
		}
	}
}
